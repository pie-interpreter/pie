<?php
$a = '
PHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PSTPHP
downloads | documentation | faq | getting help | mailing lists | licenses | wiki | reporting bugs | php.net sites | conferences | my php.net

search for in the

    PHP Manual
    Справочник языка
    Операторы
    Приоритет оператора
    Арифметические операторы
    Оператор присваивания
    Побитовые операторы
    Операторы сравнения
    Оператор управления ошибками
    Операторы исполнения
    Операторы инкремента и декремента
    Логические операторы
    Строковые операторы
    Операторы, работающие с массивами
    Оператор проверки типа

Арифметические операторы> <Операторы [edit] Last updated: Fri, 09 Nov 2012

view this page in
Приоритет оператора

Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.

Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью - смотрите примеры ниже.

В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.
Порядок выполнения операторов Ассоциативность   Оператор    Дополнительная информация
неассоциативна  clone new   clone и new
левая   [   array()
правая  ++ -- ~ (int) (float) (string) (array) (object) (bool) @    типы и increment/decrement
неассоциативна  instanceof  типы
правая  !   логические операторы
левая   * / %   арифметические операторы
левая   + - .   арифметические операторы и строковые операторы
левая   << >>   побитовые операторы
неассоциативна  < <= > >=   операторы сравнения
неассоциативна  == != === !== <>    операторы сравнения
левая   &   побитовые операторы и ссылки
левая   ^   побитовые операторы
левая   |   побитовые операторы
левая   &&  логические операторы
левая   ||  логические операторы
левая   ? :     тернарный оператор
правая  = += -= *= /= .= %= &= |= ^= <<= >>= =>     операторы присваивания
левая   and     логические операторы
левая   xor     логические операторы
левая   or  логические операторы
левая   ,   множество применений

У операторов с равным приоритетом левая ассоциативность подразумевает, что выражение вычисляется слева направо, правая ассоциативность, соответственно, подразумевает противоположный порядок.

Пример #1 Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// при совместном использовании ++ и + результат будет неопределенным
$a = 1;
echo ++$a + $a++; // может вывести 4 или 5
Использование скобок, даже там где в них нет строгой необходимости, обычно заметно улучшает читабельность кода.

    Замечание:

    Несмотря на то, что оператор = имеет низший приоритет, чем большинство остальных операторов, PHP все равно позволяет использовать следующую конструкцию: if (!$a = foo()), которая присваивает переменной $a результат выполнения функции foo().



reject note add a note add a note User Contributed Notes Приоритет оператора
Carsten Milkau 06-Jul-2012 05:06
Beware the unusual order of bit-wise operators and comparison operators, this has often lead to bugs in my experience. For instance:


will not do what you might expect from other languages. Use


in PHP instead.
headden at karelia dot ru 08-Jun-2009 09:02
Although example above already shows it, I\'d like to explicitly state that ?: associativity DIFFERS from that of C++. I.e. convenient switch/case-like expressions of the form

$i==1 ? "one" :
$i==2 ? "two" :
$i==3 ? "three" :
"error";

will not work in PHP as expected
add a note add a note


show source | credits | stats | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This mirror generously provided by: Yahoo! Inc.
Last updated: Sat Nov 17 02:03:30 2012 PST
';
