IGNORE: " |\n";

# tokens with `T_` prefix are the same as in original php interpreter
# tokens with `P_` prefix are used only in pie interpreter

T_INLINE_HTML: "\?><\?php";
T_OPEN_TAG: "<\?php";
T_CLOSE_TAG: "\?>";
T_VARIABLE: "\$[a-zA-Z_][a-zA-Z0-9_]*";
T_LNUMBER: "-?0|[1-9][0-9]*";
T_ECHO: "echo";
T_INCLUDE: "include";
T_CONSTANT_ENCAPSED_STRING: "(\"[^\"]*\")|('[^']*)'";

P_ASSIGN_OPERATOR: "=";
P_FIRST_PRIORITY_OPERATION: "\*|/";
P_SECOND_PRIORITY_OPERATION: "\+|-";
P_OPEN_BRACKET: "\(";
P_CLOSE_BRACKET: "\)";
P_STATEMENT_SEPARATOR: ";";


file: >contents<;
contents: >content_block< >contents< | [EOF];
content_block: T_INLINE_HTML
               | >code<;
code: [T_OPEN_TAG] >statements<;
statements: >statement< [P_STATEMENT_SEPARATOR]+ >statements<
            | >statement< [P_STATEMENT_SEPARATOR]* [T_CLOSE_TAG];
statement: assignment
           | >construct<;

assignment: variable_specification P_ASSIGN_OPERATOR expression;
construct: construct_echo
           | construct_include;
construct_echo: T_ECHO expression;
construct_include: T_INCLUDE expression;

# anything, that can be assigned a value
variable_specification: T_VARIABLE;

# anything, that can be assigned to variable or used as argument
expression: variable_expression | arithmetic_expression;

# anything variable-related, that can be used in expressions
variable_expression: T_VARIABLE
                     | T_CONSTANT_ENCAPSED_STRING;
# arithmetic expressions, that can be calculated
arithmetic_expression: multitive_expression P_SECOND_PRIORITY_OPERATION >arithmetic_expression<
                       | multitive_expression;
multitive_expression: >primary_expression< P_FIRST_PRIORITY_OPERATION multitive_expression
                      | >primary_expression<;
primary_expression: [P_OPEN_BRACKET] arithmetic_expression [P_CLOSE_BRACKET] | T_LNUMBER | >variable_expression<;

